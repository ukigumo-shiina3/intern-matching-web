"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

type Company {
  addressLine: String!
  createdAt: ISO8601DateTime!
  email: String!
  firebaseUid: String!
  id: ID!
  municipality: String!
  name: String!
  prefecture: String!
  updatedAt: ISO8601DateTime!
}

"""Autogenerated input type of CreateIntern"""
input CreateInternInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  firebaseUid: String!
  fieldOfStudyId: String!
  schoolYearId: String!
  name: String!
  email: String!
  schoolName: String!
  majorName: String!
}

"""Autogenerated return type of CreateIntern."""
type CreateInternPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
  intern: Intern
}

"""Autogenerated input type of CreateOrGetRoom"""
input CreateOrGetRoomInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  internId: ID!
  companyId: ID!
}

"""Autogenerated return type of CreateOrGetRoom."""
type CreateOrGetRoomPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
  room: Room!
}

type Intern {
  createdAt: ISO8601DateTime!
  email: String!
  fieldOfStudyId: String!
  firebaseUid: String!
  id: ID!
  majorName: String!
  name: String!
  schoolName: String!
  schoolYearId: String!
  updatedAt: ISO8601DateTime!
}

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

type Message {
  company: Company
  content: String!
  createdAt: ISO8601DateTime!
  id: ID!
  intern: Intern
  readAt: ISO8601DateTime
  room: Room!
  sender: SenderUnion!
  updatedAt: ISO8601DateTime!
}

type Mutation {
  createIntern(
    """Parameters for CreateIntern"""
    input: CreateInternInput!
  ): CreateInternPayload
  createOrGetRoom(
    """Parameters for CreateOrGetRoom"""
    input: CreateOrGetRoomInput!
  ): CreateOrGetRoomPayload
  sendMessage(
    """Parameters for SendMessage"""
    input: SendMessageInput!
  ): SendMessagePayload
}

type Query {
  messages(roomId: ID!): [Message!]!
  room(id: ID!): Room
  rooms(internId: ID, companyId: ID): [Room!]!
}

type Room {
  company: Company!
  createdAt: ISO8601DateTime!
  id: ID!
  intern: Intern!
  messages: [Message!]!
  updatedAt: ISO8601DateTime!
}

union SenderUnion = Company | Intern

"""Autogenerated input type of SendMessage"""
input SendMessageInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  roomId: ID!
  content: String!
  internId: ID
  companyId: ID
}

"""Autogenerated return type of SendMessage."""
type SendMessagePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]!
  message: Message
}

