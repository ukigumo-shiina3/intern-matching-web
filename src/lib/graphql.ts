import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T;
export type InputMaybe<T> = T;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: { input: any; output: any; }
};

export type G_Company = {
  addressLine: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  email: Scalars['String']['output'];
  firebaseUid: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  municipality: Scalars['String']['output'];
  name: Scalars['String']['output'];
  prefecture: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Autogenerated input type of CreateCompany */
export type G_CreateCompanyInput = {
  addressLine: Scalars['String']['input'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  firebaseUid: Scalars['String']['input'];
  municipality: Scalars['String']['input'];
  name: Scalars['String']['input'];
  prefecture: Scalars['String']['input'];
};

/** Autogenerated return type of CreateCompany. */
export type G_CreateCompanyPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  company?: Maybe<G_Company>;
  errors: Array<Scalars['String']['output']>;
};

/** Autogenerated input type of CreateIntern */
export type G_CreateInternInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  fieldOfStudyId: Scalars['String']['input'];
  firebaseUid: Scalars['String']['input'];
  majorName: Scalars['String']['input'];
  name: Scalars['String']['input'];
  schoolName: Scalars['String']['input'];
  schoolYearId: Scalars['String']['input'];
};

/** Autogenerated return type of CreateIntern. */
export type G_CreateInternPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  intern?: Maybe<G_Intern>;
};

/** Autogenerated input type of CreateOrGetRoom */
export type G_CreateOrGetRoomInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  companyId: Scalars['ID']['input'];
  internId: Scalars['ID']['input'];
};

/** Autogenerated return type of CreateOrGetRoom. */
export type G_CreateOrGetRoomPayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  room: G_Room;
};

export type G_Intern = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  email: Scalars['String']['output'];
  fieldOfStudyId: Scalars['String']['output'];
  firebaseUid: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  majorName: Scalars['String']['output'];
  name: Scalars['String']['output'];
  schoolName: Scalars['String']['output'];
  schoolYearId: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type G_Message = {
  company?: Maybe<G_Company>;
  content: Scalars['String']['output'];
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  intern?: Maybe<G_Intern>;
  readAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  room: G_Room;
  sender: G_SenderUnion;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type G_Mutation = {
  createCompany?: Maybe<G_CreateCompanyPayload>;
  createIntern?: Maybe<G_CreateInternPayload>;
  createOrGetRoom?: Maybe<G_CreateOrGetRoomPayload>;
  sendMessage?: Maybe<G_SendMessagePayload>;
};


export type G_MutationCreateCompanyArgs = {
  input: G_CreateCompanyInput;
};


export type G_MutationCreateInternArgs = {
  input: G_CreateInternInput;
};


export type G_MutationCreateOrGetRoomArgs = {
  input: G_CreateOrGetRoomInput;
};


export type G_MutationSendMessageArgs = {
  input: G_SendMessageInput;
};

export type G_Query = {
  company?: Maybe<G_Company>;
  intern?: Maybe<G_Intern>;
  messages: Array<G_Message>;
  room?: Maybe<G_Room>;
  rooms: Array<G_Room>;
};


export type G_QueryCompanyArgs = {
  firebaseUid?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type G_QueryInternArgs = {
  firebaseUid?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
};


export type G_QueryMessagesArgs = {
  roomId: Scalars['ID']['input'];
};


export type G_QueryRoomArgs = {
  id: Scalars['ID']['input'];
};


export type G_QueryRoomsArgs = {
  companyId?: InputMaybe<Scalars['ID']['input']>;
  internId?: InputMaybe<Scalars['ID']['input']>;
};

export type G_Room = {
  company: G_Company;
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['ID']['output'];
  intern: G_Intern;
  messages: Array<G_Message>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

/** Autogenerated input type of SendMessage */
export type G_SendMessageInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  companyId?: InputMaybe<Scalars['ID']['input']>;
  content: Scalars['String']['input'];
  internId?: InputMaybe<Scalars['ID']['input']>;
  roomId: Scalars['ID']['input'];
};

/** Autogenerated return type of SendMessage. */
export type G_SendMessagePayload = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  errors: Array<Scalars['String']['output']>;
  message?: Maybe<G_Message>;
};

export type G_SenderUnion = G_Company | G_Intern;

export type G_CreateCompanyMutationVariables = Exact<{
  firebaseUid: Scalars['String']['input'];
  name: Scalars['String']['input'];
  email: Scalars['String']['input'];
  prefecture: Scalars['String']['input'];
  municipality: Scalars['String']['input'];
  addressLine: Scalars['String']['input'];
}>;


export type G_CreateCompanyMutation = { createCompany?: { errors: Array<string>, company?: { id: string, firebaseUid: string, name: string, email: string, prefecture: string, municipality: string, addressLine: string } } };

export type G_GetCompanyQueryVariables = Exact<{
  firebaseUid?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['ID']['input']>;
}>;


export type G_GetCompanyQuery = { company?: { id: string, firebaseUid: string, name: string, email: string, prefecture: string, municipality: string, addressLine: string, createdAt: any, updatedAt: any } };

export type G_GetRoomsQueryVariables = Exact<{
  internId?: InputMaybe<Scalars['ID']['input']>;
  companyId?: InputMaybe<Scalars['ID']['input']>;
}>;


export type G_GetRoomsQuery = { rooms: Array<{ id: string, createdAt: any, updatedAt: any, intern: { id: string, name: string, email: string, schoolName: string, majorName: string }, company: { id: string, name: string, email: string } }> };

export type G_GetRoomQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type G_GetRoomQuery = { room?: { id: string, createdAt: any, updatedAt: any, intern: { id: string, name: string, email: string, schoolName: string, majorName: string }, company: { id: string, name: string, email: string }, messages: Array<{ id: string, content: string, createdAt: any, readAt?: any, sender:
        | { id: string, name: string }
        | { id: string, name: string }
       }> } };

export type G_GetMessagesQueryVariables = Exact<{
  roomId: Scalars['ID']['input'];
}>;


export type G_GetMessagesQuery = { messages: Array<{ id: string, content: string, createdAt: any, readAt?: any, sender:
      | { id: string, name: string }
      | { id: string, name: string }
     }> };

export type G_CreateOrGetRoomMutationVariables = Exact<{
  input: G_CreateOrGetRoomInput;
}>;


export type G_CreateOrGetRoomMutation = { createOrGetRoom?: { errors: Array<string>, room: { id: string, createdAt: any, updatedAt: any, intern: { id: string, name: string }, company: { id: string, name: string } } } };

export type G_SendMessageMutationVariables = Exact<{
  input: G_SendMessageInput;
}>;


export type G_SendMessageMutation = { sendMessage?: { errors: Array<string>, message?: { id: string, content: string, createdAt: any, sender:
        | { id: string, name: string }
        | { id: string, name: string }
       } } };

export type G_CreateInternMutationVariables = Exact<{
  input: G_CreateInternInput;
}>;


export type G_CreateInternMutation = { createIntern?: { errors: Array<string>, intern?: { id: string, name: string, email: string, firebaseUid: string, schoolName: string, majorName: string, fieldOfStudyId: string, schoolYearId: string } } };

export type G_GetCurrentInternQueryVariables = Exact<{
  firebaseUid: Scalars['String']['input'];
}>;


export type G_GetCurrentInternQuery = { intern?: { id: string, name: string, email: string, firebaseUid: string, schoolName: string, majorName: string, fieldOfStudyId: string, schoolYearId: string, createdAt: any, updatedAt: any } };

export type G_GetCurrentCompanyQueryVariables = Exact<{
  firebaseUid: Scalars['String']['input'];
}>;


export type G_GetCurrentCompanyQuery = { company?: { id: string, name: string, email: string, firebaseUid: string, prefecture: string, municipality: string, addressLine: string, createdAt: any, updatedAt: any } };


export const CreateCompanyDocument = gql`
    mutation CreateCompany($firebaseUid: String!, $name: String!, $email: String!, $prefecture: String!, $municipality: String!, $addressLine: String!) {
  createCompany(
    input: {firebaseUid: $firebaseUid, name: $name, email: $email, prefecture: $prefecture, municipality: $municipality, addressLine: $addressLine}
  ) {
    company {
      id
      firebaseUid
      name
      email
      prefecture
      municipality
      addressLine
    }
    errors
  }
}
    `;
export type G_CreateCompanyMutationFn = Apollo.MutationFunction<G_CreateCompanyMutation, G_CreateCompanyMutationVariables>;

/**
 * __useCreateCompanyMutation__
 *
 * To run a mutation, you first call `useCreateCompanyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCompanyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCompanyMutation, { data, loading, error }] = useCreateCompanyMutation({
 *   variables: {
 *      firebaseUid: // value for 'firebaseUid'
 *      name: // value for 'name'
 *      email: // value for 'email'
 *      prefecture: // value for 'prefecture'
 *      municipality: // value for 'municipality'
 *      addressLine: // value for 'addressLine'
 *   },
 * });
 */
export function useCreateCompanyMutation(baseOptions?: Apollo.MutationHookOptions<G_CreateCompanyMutation, G_CreateCompanyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<G_CreateCompanyMutation, G_CreateCompanyMutationVariables>(CreateCompanyDocument, options);
      }
export type CreateCompanyMutationHookResult = ReturnType<typeof useCreateCompanyMutation>;
export type CreateCompanyMutationResult = Apollo.MutationResult<G_CreateCompanyMutation>;
export type CreateCompanyMutationOptions = Apollo.BaseMutationOptions<G_CreateCompanyMutation, G_CreateCompanyMutationVariables>;
export const GetCompanyDocument = gql`
    query GetCompany($firebaseUid: String, $id: ID) {
  company(firebaseUid: $firebaseUid, id: $id) {
    id
    firebaseUid
    name
    email
    prefecture
    municipality
    addressLine
    createdAt
    updatedAt
  }
}
    `;

/**
 * __useGetCompanyQuery__
 *
 * To run a query within a React component, call `useGetCompanyQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCompanyQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCompanyQuery({
 *   variables: {
 *      firebaseUid: // value for 'firebaseUid'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCompanyQuery(baseOptions?: Apollo.QueryHookOptions<G_GetCompanyQuery, G_GetCompanyQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<G_GetCompanyQuery, G_GetCompanyQueryVariables>(GetCompanyDocument, options);
      }
export function useGetCompanyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<G_GetCompanyQuery, G_GetCompanyQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<G_GetCompanyQuery, G_GetCompanyQueryVariables>(GetCompanyDocument, options);
        }
export function useGetCompanySuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<G_GetCompanyQuery, G_GetCompanyQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<G_GetCompanyQuery, G_GetCompanyQueryVariables>(GetCompanyDocument, options);
        }
export type GetCompanyQueryHookResult = ReturnType<typeof useGetCompanyQuery>;
export type GetCompanyLazyQueryHookResult = ReturnType<typeof useGetCompanyLazyQuery>;
export type GetCompanySuspenseQueryHookResult = ReturnType<typeof useGetCompanySuspenseQuery>;
export type GetCompanyQueryResult = Apollo.QueryResult<G_GetCompanyQuery, G_GetCompanyQueryVariables>;
export const GetRoomsDocument = gql`
    query GetRooms($internId: ID, $companyId: ID) {
  rooms(internId: $internId, companyId: $companyId) {
    id
    createdAt
    updatedAt
    intern {
      id
      name
      email
      schoolName
      majorName
    }
    company {
      id
      name
      email
    }
  }
}
    `;

/**
 * __useGetRoomsQuery__
 *
 * To run a query within a React component, call `useGetRoomsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRoomsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRoomsQuery({
 *   variables: {
 *      internId: // value for 'internId'
 *      companyId: // value for 'companyId'
 *   },
 * });
 */
export function useGetRoomsQuery(baseOptions?: Apollo.QueryHookOptions<G_GetRoomsQuery, G_GetRoomsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<G_GetRoomsQuery, G_GetRoomsQueryVariables>(GetRoomsDocument, options);
      }
export function useGetRoomsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<G_GetRoomsQuery, G_GetRoomsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<G_GetRoomsQuery, G_GetRoomsQueryVariables>(GetRoomsDocument, options);
        }
export function useGetRoomsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<G_GetRoomsQuery, G_GetRoomsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<G_GetRoomsQuery, G_GetRoomsQueryVariables>(GetRoomsDocument, options);
        }
export type GetRoomsQueryHookResult = ReturnType<typeof useGetRoomsQuery>;
export type GetRoomsLazyQueryHookResult = ReturnType<typeof useGetRoomsLazyQuery>;
export type GetRoomsSuspenseQueryHookResult = ReturnType<typeof useGetRoomsSuspenseQuery>;
export type GetRoomsQueryResult = Apollo.QueryResult<G_GetRoomsQuery, G_GetRoomsQueryVariables>;
export const GetRoomDocument = gql`
    query GetRoom($id: ID!) {
  room(id: $id) {
    id
    createdAt
    updatedAt
    intern {
      id
      name
      email
      schoolName
      majorName
    }
    company {
      id
      name
      email
    }
    messages {
      id
      content
      createdAt
      readAt
      sender {
        ... on Intern {
          id
          name
        }
        ... on Company {
          id
          name
        }
      }
    }
  }
}
    `;

/**
 * __useGetRoomQuery__
 *
 * To run a query within a React component, call `useGetRoomQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRoomQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRoomQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetRoomQuery(baseOptions: Apollo.QueryHookOptions<G_GetRoomQuery, G_GetRoomQueryVariables> & ({ variables: G_GetRoomQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<G_GetRoomQuery, G_GetRoomQueryVariables>(GetRoomDocument, options);
      }
export function useGetRoomLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<G_GetRoomQuery, G_GetRoomQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<G_GetRoomQuery, G_GetRoomQueryVariables>(GetRoomDocument, options);
        }
export function useGetRoomSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<G_GetRoomQuery, G_GetRoomQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<G_GetRoomQuery, G_GetRoomQueryVariables>(GetRoomDocument, options);
        }
export type GetRoomQueryHookResult = ReturnType<typeof useGetRoomQuery>;
export type GetRoomLazyQueryHookResult = ReturnType<typeof useGetRoomLazyQuery>;
export type GetRoomSuspenseQueryHookResult = ReturnType<typeof useGetRoomSuspenseQuery>;
export type GetRoomQueryResult = Apollo.QueryResult<G_GetRoomQuery, G_GetRoomQueryVariables>;
export const GetMessagesDocument = gql`
    query GetMessages($roomId: ID!) {
  messages(roomId: $roomId) {
    id
    content
    createdAt
    readAt
    sender {
      ... on Intern {
        id
        name
      }
      ... on Company {
        id
        name
      }
    }
  }
}
    `;

/**
 * __useGetMessagesQuery__
 *
 * To run a query within a React component, call `useGetMessagesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMessagesQuery({
 *   variables: {
 *      roomId: // value for 'roomId'
 *   },
 * });
 */
export function useGetMessagesQuery(baseOptions: Apollo.QueryHookOptions<G_GetMessagesQuery, G_GetMessagesQueryVariables> & ({ variables: G_GetMessagesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<G_GetMessagesQuery, G_GetMessagesQueryVariables>(GetMessagesDocument, options);
      }
export function useGetMessagesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<G_GetMessagesQuery, G_GetMessagesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<G_GetMessagesQuery, G_GetMessagesQueryVariables>(GetMessagesDocument, options);
        }
export function useGetMessagesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<G_GetMessagesQuery, G_GetMessagesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<G_GetMessagesQuery, G_GetMessagesQueryVariables>(GetMessagesDocument, options);
        }
export type GetMessagesQueryHookResult = ReturnType<typeof useGetMessagesQuery>;
export type GetMessagesLazyQueryHookResult = ReturnType<typeof useGetMessagesLazyQuery>;
export type GetMessagesSuspenseQueryHookResult = ReturnType<typeof useGetMessagesSuspenseQuery>;
export type GetMessagesQueryResult = Apollo.QueryResult<G_GetMessagesQuery, G_GetMessagesQueryVariables>;
export const CreateOrGetRoomDocument = gql`
    mutation CreateOrGetRoom($input: CreateOrGetRoomInput!) {
  createOrGetRoom(input: $input) {
    room {
      id
      createdAt
      updatedAt
      intern {
        id
        name
      }
      company {
        id
        name
      }
    }
    errors
  }
}
    `;
export type G_CreateOrGetRoomMutationFn = Apollo.MutationFunction<G_CreateOrGetRoomMutation, G_CreateOrGetRoomMutationVariables>;

/**
 * __useCreateOrGetRoomMutation__
 *
 * To run a mutation, you first call `useCreateOrGetRoomMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOrGetRoomMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOrGetRoomMutation, { data, loading, error }] = useCreateOrGetRoomMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateOrGetRoomMutation(baseOptions?: Apollo.MutationHookOptions<G_CreateOrGetRoomMutation, G_CreateOrGetRoomMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<G_CreateOrGetRoomMutation, G_CreateOrGetRoomMutationVariables>(CreateOrGetRoomDocument, options);
      }
export type CreateOrGetRoomMutationHookResult = ReturnType<typeof useCreateOrGetRoomMutation>;
export type CreateOrGetRoomMutationResult = Apollo.MutationResult<G_CreateOrGetRoomMutation>;
export type CreateOrGetRoomMutationOptions = Apollo.BaseMutationOptions<G_CreateOrGetRoomMutation, G_CreateOrGetRoomMutationVariables>;
export const SendMessageDocument = gql`
    mutation SendMessage($input: SendMessageInput!) {
  sendMessage(input: $input) {
    message {
      id
      content
      createdAt
      sender {
        ... on Intern {
          id
          name
        }
        ... on Company {
          id
          name
        }
      }
    }
    errors
  }
}
    `;
export type G_SendMessageMutationFn = Apollo.MutationFunction<G_SendMessageMutation, G_SendMessageMutationVariables>;

/**
 * __useSendMessageMutation__
 *
 * To run a mutation, you first call `useSendMessageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSendMessageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sendMessageMutation, { data, loading, error }] = useSendMessageMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSendMessageMutation(baseOptions?: Apollo.MutationHookOptions<G_SendMessageMutation, G_SendMessageMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<G_SendMessageMutation, G_SendMessageMutationVariables>(SendMessageDocument, options);
      }
export type SendMessageMutationHookResult = ReturnType<typeof useSendMessageMutation>;
export type SendMessageMutationResult = Apollo.MutationResult<G_SendMessageMutation>;
export type SendMessageMutationOptions = Apollo.BaseMutationOptions<G_SendMessageMutation, G_SendMessageMutationVariables>;
export const CreateInternDocument = gql`
    mutation CreateIntern($input: CreateInternInput!) {
  createIntern(input: $input) {
    intern {
      id
      name
      email
      firebaseUid
      schoolName
      majorName
      fieldOfStudyId
      schoolYearId
    }
    errors
  }
}
    `;
export type G_CreateInternMutationFn = Apollo.MutationFunction<G_CreateInternMutation, G_CreateInternMutationVariables>;

/**
 * __useCreateInternMutation__
 *
 * To run a mutation, you first call `useCreateInternMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateInternMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createInternMutation, { data, loading, error }] = useCreateInternMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateInternMutation(baseOptions?: Apollo.MutationHookOptions<G_CreateInternMutation, G_CreateInternMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<G_CreateInternMutation, G_CreateInternMutationVariables>(CreateInternDocument, options);
      }
export type CreateInternMutationHookResult = ReturnType<typeof useCreateInternMutation>;
export type CreateInternMutationResult = Apollo.MutationResult<G_CreateInternMutation>;
export type CreateInternMutationOptions = Apollo.BaseMutationOptions<G_CreateInternMutation, G_CreateInternMutationVariables>;
export const GetCurrentInternDocument = gql`
    query GetCurrentIntern($firebaseUid: String!) {
  intern(firebaseUid: $firebaseUid) {
    id
    name
    email
    firebaseUid
    schoolName
    majorName
    fieldOfStudyId
    schoolYearId
    createdAt
    updatedAt
  }
}
    `;

/**
 * __useGetCurrentInternQuery__
 *
 * To run a query within a React component, call `useGetCurrentInternQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCurrentInternQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCurrentInternQuery({
 *   variables: {
 *      firebaseUid: // value for 'firebaseUid'
 *   },
 * });
 */
export function useGetCurrentInternQuery(baseOptions: Apollo.QueryHookOptions<G_GetCurrentInternQuery, G_GetCurrentInternQueryVariables> & ({ variables: G_GetCurrentInternQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<G_GetCurrentInternQuery, G_GetCurrentInternQueryVariables>(GetCurrentInternDocument, options);
      }
export function useGetCurrentInternLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<G_GetCurrentInternQuery, G_GetCurrentInternQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<G_GetCurrentInternQuery, G_GetCurrentInternQueryVariables>(GetCurrentInternDocument, options);
        }
export function useGetCurrentInternSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<G_GetCurrentInternQuery, G_GetCurrentInternQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<G_GetCurrentInternQuery, G_GetCurrentInternQueryVariables>(GetCurrentInternDocument, options);
        }
export type GetCurrentInternQueryHookResult = ReturnType<typeof useGetCurrentInternQuery>;
export type GetCurrentInternLazyQueryHookResult = ReturnType<typeof useGetCurrentInternLazyQuery>;
export type GetCurrentInternSuspenseQueryHookResult = ReturnType<typeof useGetCurrentInternSuspenseQuery>;
export type GetCurrentInternQueryResult = Apollo.QueryResult<G_GetCurrentInternQuery, G_GetCurrentInternQueryVariables>;
export const GetCurrentCompanyDocument = gql`
    query GetCurrentCompany($firebaseUid: String!) {
  company(firebaseUid: $firebaseUid) {
    id
    name
    email
    firebaseUid
    prefecture
    municipality
    addressLine
    createdAt
    updatedAt
  }
}
    `;

/**
 * __useGetCurrentCompanyQuery__
 *
 * To run a query within a React component, call `useGetCurrentCompanyQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCurrentCompanyQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCurrentCompanyQuery({
 *   variables: {
 *      firebaseUid: // value for 'firebaseUid'
 *   },
 * });
 */
export function useGetCurrentCompanyQuery(baseOptions: Apollo.QueryHookOptions<G_GetCurrentCompanyQuery, G_GetCurrentCompanyQueryVariables> & ({ variables: G_GetCurrentCompanyQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<G_GetCurrentCompanyQuery, G_GetCurrentCompanyQueryVariables>(GetCurrentCompanyDocument, options);
      }
export function useGetCurrentCompanyLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<G_GetCurrentCompanyQuery, G_GetCurrentCompanyQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<G_GetCurrentCompanyQuery, G_GetCurrentCompanyQueryVariables>(GetCurrentCompanyDocument, options);
        }
export function useGetCurrentCompanySuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<G_GetCurrentCompanyQuery, G_GetCurrentCompanyQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<G_GetCurrentCompanyQuery, G_GetCurrentCompanyQueryVariables>(GetCurrentCompanyDocument, options);
        }
export type GetCurrentCompanyQueryHookResult = ReturnType<typeof useGetCurrentCompanyQuery>;
export type GetCurrentCompanyLazyQueryHookResult = ReturnType<typeof useGetCurrentCompanyLazyQuery>;
export type GetCurrentCompanySuspenseQueryHookResult = ReturnType<typeof useGetCurrentCompanySuspenseQuery>;
export type GetCurrentCompanyQueryResult = Apollo.QueryResult<G_GetCurrentCompanyQuery, G_GetCurrentCompanyQueryVariables>;